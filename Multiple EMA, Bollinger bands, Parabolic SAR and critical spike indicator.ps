//@version=6
indicator(title="Multiple EMA, Bollinger bands, Parabolic SAR and critical spike indicator", shorttitle="MEBBPSCSI", overlay=true)

// EMAS
allEMASDisabled = input.bool(false, title="Disabled", group = "All EMA")

emaOneLabel = "EMA 1"
emaLen = input.int(7, minval=1, title="Length", group=emaOneLabel, inline = emaOneLabel)
emaSrc = input(close, title="Source", group=emaOneLabel, inline = emaOneLabel)
emaOffset = input.int(title="Offset", defval=0, minval=-500, maxval=500, group=emaOneLabel, inline = emaOneLabel)
ema = ta.ema(emaSrc, emaLen)
plot(ema, emaOneLabel, display = allEMASDisabled? display.none : display.all, color=color.white, offset=input.int(title="Offset", defval=0, minval=-500, maxval=500, group=emaOneLabel, inline = emaOneLabel))

emaTwoLabel = "EMA 2"
emaLen := input.int(25, minval=1, title="Length", group=emaTwoLabel, inline = emaTwoLabel)
emaSrc := input(close, title="Source", group=emaTwoLabel, inline = emaTwoLabel)
emaOffset := input.int(title="Offset", defval=0, minval=-500, maxval=500, group=emaTwoLabel, inline = emaTwoLabel)
ema := ta.ema(emaSrc, emaLen)
plot(ema, emaTwoLabel, display = allEMASDisabled? display.none : display.all, color=color.yellow, offset=emaOffset)

emaThreeLabel = "EMA 3"
emaLen := input.int(50, minval=1, title="Length", group=emaThreeLabel, inline = emaThreeLabel)
emaSrc := input(close, title="Source", group=emaThreeLabel, inline = emaThreeLabel)
emaOffset := input.int(title="Offset", defval=0, minval=-500, maxval=500, group=emaThreeLabel, inline = emaThreeLabel)
ema := ta.ema(emaSrc, emaLen)
plot(ema, emaThreeLabel, display = allEMASDisabled? display.none : display.all, color=color.orange, offset=emaOffset)

emaFourLabel = "EMA 4"
emaLen := input.int(100, minval=1, title="Length", group=emaFourLabel, inline = emaFourLabel)
emaSrc := input(close, title="Source", group=emaFourLabel, inline = emaFourLabel)
emaOffset := input.int(title="Offset", defval=0, minval=-500, maxval=500, group=emaFourLabel, inline = emaFourLabel)
ema := ta.ema(emaSrc, emaLen)
plot(ema, emaFourLabel, display = allEMASDisabled? display.none : display.all, color=color.aqua, offset=emaOffset)

emaFiveLabel = "EMA 5"
emaLen := input.int(150, minval=1, title="Length", group=emaFiveLabel, inline = emaFiveLabel)
emaSrc := input(close, title="Source", group=emaFiveLabel, inline = emaFiveLabel)
emaOffset := input.int(title="Offset", defval=0, minval=-500, maxval=500, group=emaFiveLabel, inline = emaFiveLabel)
ema := ta.ema(emaSrc, emaLen)
plot(ema, emaFiveLabel, display = allEMASDisabled? display.none : display.all, color=color.fuchsia, offset=emaOffset)

emaSixLabel = "EMA 6"
emaLen := input.int(200, minval=1, title="Length", group=emaSixLabel, inline=emaSixLabel)
emaSrc := input(close, title="Source", group=emaSixLabel, inline = emaSixLabel)
emaOffset := input.int(title="Offset", defval=0, minval=-500, maxval=500, group=emaSixLabel, inline = emaSixLabel)
ema := ta.ema(emaSrc, emaLen)
plot(ema, emaSixLabel, display = allEMASDisabled? display.none : display.all, color=color.green, offset=emaOffset)

// Parabolic SAR
parabolicSARLabel = "Parabolic SAR"
start = input(0.02, group=parabolicSARLabel, inline=parabolicSARLabel)
increment = input(0.02, group=parabolicSARLabel, inline=parabolicSARLabel)
maximum = input(0.2, group=parabolicSARLabel, inline=parabolicSARLabel)
out = ta.sar(start, increment, maximum)
plot(out, parabolicSARLabel, style=plot.style_cross, color=#2962FF, display = display.none)

// Bollinger Bands
bBLabel = "Bollinger bands"
bbDisabled = input.bool(false, title="Disabled", group = bBLabel)

length = input.int(20, minval=1, group = bBLabel, inline = bBLabel)
src = input(close, title="Source", group = bBLabel, inline = bBLabel)
mult = input.float(2.0, minval=0.001, maxval=50, title="StdDev", group = bBLabel, inline = bBLabel)
basis = ta.sma(src, length)
dev = mult * ta.stdev(src, length)
upper = basis + dev
lower = basis - dev
offset = input.int(0, "Offset", minval = -500, maxval = 500, group = bBLabel, inline = bBLabel)
plot(basis, "Basis", color=color.rgb(0, 0, 0, 0), offset = offset, linewidth = 2)
p1 = plot(upper, "Upper", display = bbDisabled? display.none : display.all, color=#ff0000, offset = offset, linewidth = 2)
p2 = plot(lower, "Lower", display = bbDisabled? display.none : display.all, color=#37ff00, offset = offset, linewidth = 2)
fill(p1, p2, title = "Background", display = bbDisabled? display.none : display.all, color=color.rgb(33, 149, 243, 90))

// Scalp indicator
scalpIndicatorLabel = "Critical spike detector"
scalpIndicatorDisabled = input.bool(false, title="Disabled", group = scalpIndicatorLabel, inline = scalpIndicatorLabel)
considerOnlyBBContacts = input.bool(false, title="Consider only contacts with BB", group = scalpIndicatorLabel, inline = scalpIndicatorLabel)
scalp1MIndicatorLabel = "1M chart"
scalp1WIndicatorLabel = "1W chart"
scalp1DIndicatorLabel = "1D chart"
scalp4HIndicatorLabel = "4H chart"
scalp2HIndicatorLabel = "2H chart"
scalp1HIndicatorLabel = "1H chart"
scalp15mIndicatorLabel = "15m chart"
scalp5mIndicatorLabel = "5m chart"
scalp1mIndicatorLabel = "1m chart"
spikePercentage = switch timeframe.period
    "1M" => input.int(40, minval=1, title= "1M spike % size", group = scalpIndicatorLabel, inline = scalp1MIndicatorLabel)
    "1W" => input.float(40, minval=0, maxval=100, title="1W spike % size", group = scalpIndicatorLabel, inline = scalp1WIndicatorLabel)
    "1D" => input.float(40, minval=0,  maxval=100, title="1D spike % size", group = scalpIndicatorLabel, inline = scalp1DIndicatorLabel)
    "240" => input.float(40, minval=0,  maxval=100, title="4H spike % size", group = scalpIndicatorLabel, inline = scalp4HIndicatorLabel)
    "120" => input.float(40, minval=0,  maxval=100, title="2H spike % size", group = scalpIndicatorLabel, inline = scalp2HIndicatorLabel)
    "60" => input.float(30, minval=0,  maxval=100, title="1H spike % size", group = scalpIndicatorLabel, inline = scalp1HIndicatorLabel)
    "15" => input.float(30, minval=0,  maxval=100, title="15m spike % size", group = scalpIndicatorLabel, inline = scalp15mIndicatorLabel)
    "5" => input.float(30, minval=0,  maxval=100, title="5m spike % size", group = scalpIndicatorLabel, inline = scalp5mIndicatorLabel)
    "1" => input.float(30, minval=0, maxval=100, title="1m spike % size", group = scalpIndicatorLabel, inline = scalp1mIndicatorLabel)
    => 40

comparingValue = switch timeframe.period
    "1M" => input.float(15.0, minval=0, maxval=100, title="% of cs variation", group = scalpIndicatorLabel, inline = scalp1MIndicatorLabel)
    "1W" => input.float(9.0, minval=0, maxval=100, title="% of cs variation", group = scalpIndicatorLabel, inline = scalp1WIndicatorLabel)
    "1D" => input.float(5.0, minval=0,  maxval=100, title="% of cs variation", group = scalpIndicatorLabel, inline = scalp1DIndicatorLabel)
    "240" => input.float(3.0, minval=0,  maxval=100, title="% of cs variation", group = scalpIndicatorLabel, inline = scalp4HIndicatorLabel)
    "120" => input.float(2.0, minval=0,  maxval=100, title="% of cs variation", group = scalpIndicatorLabel, inline = scalp2HIndicatorLabel)
    "60" => input.float(1.5, minval=0,  maxval=100, title="% of cs variation", group = scalpIndicatorLabel, inline = scalp1HIndicatorLabel)
    "15" => input.float(0.75, minval=0,  maxval=100, title="% of cs variation", group = scalpIndicatorLabel, inline = scalp15mIndicatorLabel)
    "5" => input.float(0.5, minval=0,  maxval=100, title="% of cs variation", group = scalpIndicatorLabel, inline = scalp5mIndicatorLabel)
    "1" => input.float(0.25, minval=0, maxval=100, title="% of cs variation", group = scalpIndicatorLabel, inline = scalp1mIndicatorLabel)
    => 
        runtime.error('No comparison value for period: ' + timeframe.period)
        float(na)

priceVariation = high - low
lowSpikeValue = close < open ? close - low : open - low
highSpikeValue = close > open ? high - close : high - open
lowSpikePercentage = (lowSpikeValue * 100)/priceVariation
highSpikePercentage = (highSpikeValue * 100)/priceVariation
totalCandleVariation = ((high - low) / high) * 100
//log.info('variation: {0}', totalCandleVariation)
buyCondition = lowSpikePercentage >= spikePercentage and totalCandleVariation >= comparingValue and lowSpikeValue >= highSpikeValue and (considerOnlyBBContacts ? (low <= lower) : true)
sellCondition = highSpikePercentage >= spikePercentage and totalCandleVariation >= comparingValue and highSpikeValue >= lowSpikeValue and (considerOnlyBBContacts ? (high >= upper) : true)
plotshape(not scalpIndicatorDisabled and buyCondition, title="Up Alert", location=location.belowbar, color=color.green, size=size.tiny, style=shape.triangleup)
plotshape(not scalpIndicatorDisabled and sellCondition, title="Down Alert", location=location.abovebar, color=color.red, size=size.tiny, style=shape.triangledown)

alertcondition(buyCondition or sellCondition, title= "Buy/sell condition", message="It's the time...")

//Support and resistence
prd = input.int(defval = 10, title="Pivot Period", minval = 4, maxval = 30, group = "Settings 🔨", tooltip="Used while calculating Pivot Points, checks left&right bars")
ppsrc = input.string(defval = 'High/Low', title="Source", options = ['High/Low', 'Close/Open'], group = "Settings 🔨", tooltip="Source for Pivot Points")
ChannelW = input.int(defval = 5, title = "Maximum Channel Width %", minval = 1, maxval = 8, group = "Settings 🔨", tooltip="Calculated using Highest/Lowest levels in 300 bars")
minstrength = input.int(defval = 1, title = "Minimum Strength", minval = 1, group = "Settings 🔨", tooltip = "Channel must contain at least 2 Pivot Points")
maxnumsr = input.int(defval = 6, title = "Maximum Number of S/R", minval = 1, maxval = 10, group = "Settings 🔨", tooltip = "Maximum number of Support/Resistance Channels to Show") - 1
loopback = input.int(defval = 290, title = "Loopback Period", minval = 100, maxval = 400, group = "Settings 🔨", tooltip="While calculating S/R levels it checks Pivots in Loopback Period")
res_col = input(defval = color.new(color.red, 75), title = "Resistance Color", group = "Colors 🟡🟢🟣")
sup_col = input(defval = color.new(color.lime, 75), title = "Support Color", group = "Colors 🟡🟢🟣")
inch_col = input(defval = color.new(color.gray, 75), title = "Color When Price in Channel", group = "Colors 🟡🟢🟣")
showpp = input(defval = false, title = "Show Pivot Points", group = "Extras ⏶⏷")
showsrbroken = input(defval = false, title = "Show Broken Support/Resistance", group = "Extras ⏶⏷")
showthema1en = input(defval = false, title = "MA 1", inline = "ma1")
showthema1len = input(defval = 50, title = "", inline = "ma1")
showthema1type = input.string(defval = "SMA", title = "", options = ["SMA", "EMA"], inline = "ma1")
showthema2en = input(defval = false, title = "MA 2", inline = "ma2")
showthema2len = input(defval = 200, title = "", inline = "ma2")
showthema2type = input.string(defval = "SMA", title = "", options = ["SMA", "EMA"], inline = "ma2")

ma1 = showthema1en ? (showthema1type == "SMA" ? ta.sma(close, showthema1len) : ta.ema(close, showthema1len)) : na
ma2 = showthema2en ? (showthema2type == "SMA" ? ta.sma(close, showthema2len) : ta.ema(close, showthema2len)) : na

plot(ma1, color = not na(ma1) ? color.blue : na)
plot(ma2, color = not na(ma2) ? color.red : na)

// get Pivot High/low
float src1 =  ppsrc == 'High/Low' ? high : math.max(close, open)
float src2 =  ppsrc == 'High/Low' ? low: math.min(close, open)
float ph = ta.pivothigh(src1, prd, prd)
float pl = ta.pivotlow(src2, prd, prd) 

// draw Pivot points
plotshape(showpp ? ph : nz(ph), text = "H",  style = shape.labeldown, color = na, textcolor = color.red, location = location.abovebar, offset = -prd)
plotshape(showpp ? pl : nz(pl), text = "L",  style = shape.labelup, color = na, textcolor = color.lime, location = location.belowbar, offset = -prd)

//calculate maximum S/R channel width
prdhighest =  ta.highest(300)
prdlowest =  ta.lowest(300)
cwidth = (prdhighest - prdlowest) * ChannelW / 100

// get/keep Pivot levels
var pivotvals= array.new_float(0)
var pivotlocs= array.new_float(0)
if nz(ph) != 0 or nz(pl) != 0
    array.unshift(pivotvals, nz(ph) != 0 ? ph : pl)
    array.unshift(pivotlocs, bar_index)
    for x = array.size(pivotvals) - 1 to 0
        if bar_index - array.get(pivotlocs, x) > loopback // remove old pivot points
            array.pop(pivotvals)
            array.pop(pivotlocs)
            continue
        break

//find/create SR channel of a pivot point
get_sr_vals(ind)=>
    float lo = array.get(pivotvals, ind)
    float hi = lo
    int numpp = 0
    for y = 0 to array.size(pivotvals) - 1
        float cpp = array.get(pivotvals, y)
        float wdth = cpp <= hi ? hi - cpp : cpp - lo
        if wdth <= cwidth // fits the max channel width?
            if cpp <= hi
                lo := math.min(lo, cpp)
            else
                hi := math.max(hi, cpp)
                
            numpp := numpp + 20 // each pivot point added as 20
    [hi, lo, numpp] 

// keep old SR channels and calculate/sort new channels if we met new pivot point
var suportresistance = array.new_float(20, 0) // min/max levels
changeit(x, y)=>
    tmp = array.get(suportresistance, y * 2)
    array.set(suportresistance, y * 2, array.get(suportresistance, x * 2))
    array.set(suportresistance, x * 2, tmp)
    tmp := array.get(suportresistance, y * 2 + 1)
    array.set(suportresistance, y * 2 + 1, array.get(suportresistance, x * 2 + 1))
    array.set(suportresistance, x * 2 + 1, tmp)
    
if nz(ph) != 0 or nz(pl) != 0
    supres = array.new_float(0)  // number of pivot, strength, min/max levels
    stren = array.new_float(10, 0)
    // get levels and strengs
    for x = 0 to array.size(pivotvals) - 1
        [hi, lo, strength] = get_sr_vals(x)
        array.push(supres, strength)
        array.push(supres, hi)
        array.push(supres, lo)
    
    // add each HL to strengh
    for x = 0 to array.size(pivotvals) - 1
        h = array.get(supres, x * 3 + 1)
        l = array.get(supres, x * 3 + 2)
        s = 0
        for y = 0 to loopback
            if (high[y] <= h and high[y] >= l) or
               (low[y] <= h and low[y] >= l)
                s := s + 1
        array.set(supres, x * 3, array.get(supres, x * 3) + s)
    
    //reset SR levels
    array.fill(suportresistance, 0)
    // get strongest SRs
    supSrc = 0
    for x = 0 to array.size(pivotvals) - 1
        stv = -1. // value
        stl = -1 // location
        for y = 0 to array.size(pivotvals) - 1
            if array.get(supres, y * 3) > stv and array.get(supres, y * 3) >= minstrength * 20
                stv := array.get(supres, y * 3)
                stl := y
        if stl >= 0
            //get sr level
            hh = array.get(supres, stl * 3 + 1)
            ll = array.get(supres, stl * 3 + 2)
            array.set(suportresistance, supSrc * 2, hh)
            array.set(suportresistance, supSrc * 2 + 1, ll)
            array.set(stren, supSrc, array.get(supres, stl * 3))
            
            // make included pivot points' strength zero 
            for y = 0 to array.size(pivotvals) - 1
                if (array.get(supres, y * 3 + 1) <= hh and array.get(supres, y * 3 + 1) >= ll) or
                   (array.get(supres, y * 3 + 2) <= hh and array.get(supres, y * 3 + 2) >= ll)
                    array.set(supres, y * 3, -1)

            supSrc += 1
            if supSrc >= 10
                break
    
    for x = 0 to 8
        for y = x + 1 to 9
            if array.get(stren, y) > array.get(stren, x)
                tmp = array.get(stren, y) 
                array.set(stren, y, array.get(stren, x))
                changeit(x, y)
                
    
get_level(ind)=>
    float ret = na
    if ind < array.size(suportresistance)
        if array.get(suportresistance, ind) != 0
            ret := array.get(suportresistance, ind)
    ret
    
get_color(ind)=>
    color ret = na
    if ind < array.size(suportresistance)
        if array.get(suportresistance, ind) != 0
            ret := array.get(suportresistance, ind) > close and array.get(suportresistance, ind + 1) > close ? res_col :
                   array.get(suportresistance, ind) < close and array.get(suportresistance, ind + 1) < close ? sup_col :
                   inch_col
    ret

var srchannels = array.new_box(10)
for x = 0 to math.min(9, maxnumsr)
    box.delete(array.get(srchannels, x))
    srcol = get_color(x * 2)
    if not na(srcol)
        array.set(srchannels, x, 
                  box.new(left = bar_index, top = get_level(x * 2), right = bar_index + 1, bottom = get_level(x * 2 + 1), 
                          border_color = srcol, 
                          border_width = 1,
                          extend = extend.both, 
                          bgcolor = srcol))

resistancebroken = false
supportbroken = false

// check if it's not in a channel
not_in_a_channel = true
for x = 0 to math.min(9, maxnumsr)
    if close <= array.get(suportresistance, x * 2) and close >= array.get(suportresistance, x * 2 + 1) 
        not_in_a_channel := false

// if price is not in a channel then check broken ones
if not_in_a_channel
    for x = 0 to math.min(9, maxnumsr)
        if close[1] <= array.get(suportresistance, x * 2) and close > array.get(suportresistance, x * 2)
            resistancebroken := true
        if close[1] >= array.get(suportresistance, x * 2 + 1) and close < array.get(suportresistance, x * 2 + 1)
            supportbroken := true

alertcondition(resistancebroken, title = "Resistance Broken", message = "Resistance Broken")
alertcondition(supportbroken, title = "Support Broken", message = "Support Broken")
plotshape(showsrbroken and resistancebroken, style = shape.triangleup, location = location.belowbar, color = color.new(color.lime, 0), size = size.tiny)
plotshape(showsrbroken and supportbroken, style = shape.triangledown, location = location.abovebar, color = color.new(color.red, 0), size = size.tiny)
